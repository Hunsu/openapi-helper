package fr.asanokaze.openapihelper.indexing

import com.intellij.openapi.diagnostic.Logger
import com.intellij.openapi.project.ProjectManager
import com.intellij.openapi.roots.ProjectFileIndex
import com.intellij.util.indexing.*
import com.intellij.util.io.EnumeratorStringDescriptor
import com.intellij.util.io.KeyDescriptor

private val LOG = Logger.getInstance(OpenApiMethodIndex::class.java)

/**
 * A file-based index extension for indexing OpenAPI operation IDs and the files in which they appear.
 *
 * ## Purpose
 * This index is designed to enable fast and efficient retrieval of files containing OpenAPI operation IDs,
 * facilitating navigation and enabling other features like endpoint usages and schema tracking. Files are indexed
 * based on generated OpenAPI code for Java, Kotlin, and TypeScript, with an emphasis on efficient filtering and
 * performance.
 *
 * ## Key Considerations
 * - **Performance First**: The index is optimized to ensure IntelliJ IDEA's indexing process runs smoothly without
 *   blocking or freezing the IDE. Special care is taken to avoid using PSI elements or accessing other indices,
 *   as these operations could lead to performance degradation or crashes during the indexing phase.
 * - **Filter Aggressively**: Files that are unlikely to be relevant (e.g., dependencies in `node_modules`) are excluded
 *   to reduce the indexing overhead.
 *
 * ## Supported Features
 * - Indexes OpenAPI operation IDs in:
 *   - Java (`@Operation` annotation)
 *   - Kotlin (`@Operation` annotation)
 *   - TypeScript (Async functions generated by OpenAPI Generator)
 * - Maps operation IDs to the files where they are defined, enabling quick lookup and navigation.
 */
class OpenApiMethodIndex : FileBasedIndexExtension<String, String>() {

    override fun getName() = KEY

    override fun getVersion(): Int = 22

    override fun dependsOnFileContent(): Boolean = true

    /**
     * Defines the logic for indexing files. It processes the file content and extracts operation IDs where applicable.
     *
     * - For Java/Kotlin, it searches for `@Operation` annotations with `operationId`.
     * - For TypeScript, it detects async functions generated by OpenAPI Generator.
     */
    override fun getIndexer(): DataIndexer<String, String, FileContent> = DataIndexer { fileContent ->
        val result = mutableMapOf<String, String>()

        // Avoid processing JAR files or dependencies
        if (fileContent.file.url.startsWith("jar")) return@DataIndexer result

        val text = fileContent.contentAsText

        // Retrieve the project-relative path
        val projectRelativePath = fileContent.file.path.removePrefix(
                fileContent.project.basePath.orEmpty()
        )

        // Java/Kotlin files containing operation IDs
        if ((fileContent.file.extension == "java" || fileContent.file.extension == "kt") &&
                text.contains("@Operation") &&
                text.contains("io.swagger.v3.oas.annotations")
        ) {
            val regex = Regex("""operationId\s*=\s*"([^"]+)"""")
            for (match in regex.findAll(text)) {
                val operationId = match.groups[1]?.value
                if (operationId != null) {
                    result[operationId] = projectRelativePath // Store the relative path
                }
            }
        }

        // TypeScript files with async functions
        if (fileContent.file.extension == "ts" && text.contains("generated by Openapi Generator")) {
            val regex = Regex("""async (\w+)Raw\(""")
            for (match in regex.findAll(text)) {
                val rawFunctionName = match.groups[1]?.value
                if (rawFunctionName != null) {
                    val functionKey = rawFunctionName.removeSuffix("Raw")
                    result[functionKey] = projectRelativePath
                }
            }
        }

        result
    }

    /**
     * Describes the format of keys for the index. Keys correspond to operation IDs as strings.
     */
    override fun getKeyDescriptor(): KeyDescriptor<String> = EnumeratorStringDescriptor.INSTANCE

    /**
     * Describes the format for values in the index. Values are file URLs as strings.
     */
    override fun getValueExternalizer(): EnumeratorStringDescriptor = EnumeratorStringDescriptor.INSTANCE

    /**
     * Filters files to be considered for indexing. This ensures that only relevant files are processed, while avoiding
     * performance bottlenecks by skipping irrelevant files (e.g., dependencies in `node_modules` or external libraries).
     */
    override fun getInputFilter(): FileBasedIndex.InputFilter = FileBasedIndex.InputFilter { file ->
        val projectFileIndex = ProjectFileIndex.getInstance(ProjectManager.getInstance().openProjects.first())
        !projectFileIndex.isInLibrary(file) && !file.path.contains("node_modules") &&
                (file.extension == "java" || file.extension == "kt" || file.extension == "ts")
    }
}

val KEY = ID.create<String, String>("fr.asanokaze.openapihelper.method")